---
import SectionTitle from './SectionTitle.astro'

const logos = [
	'/logos/html.png',
	'/logos/css.png',
	'/logos/js.png',
	'/logos/ts.png',
	'/logos/react.png',
	'/logos/astro.png',
	'/logos/node.png',
	'/logos/azure.png',
	'/logos/firebase.png',
	'/logos/next.png',
	'/logos/express.png',
	'/logos/mongo.png',
	'/logos/tailwind.png',
	'/logos/wordpress.png',
	'/logos/electron.png',
	'/logos/git.png',
]
---

<section id='stack'>
	<SectionTitle title='Mi Stack' />
	<h4>Algunas de las tecnologías que utilizo</h4>
	<div class='container'>
		<ul>
			{
				// Se utiliza el segundo parámetro "index" para calcular el retraso de cada elemento.
				logos.map((logo, index) => (
					<li style={`--delay: ${index * 0.05}s;`}>
						<img src={logo} alt='logo' />
					</li>
				))
			}
		</ul>
	</div>
</section>

<style>
	section {
		margin: 50px 10%;
	}

	ul {
		list-style: none;
		display: flex;
		gap: 20px;
		flex-wrap: wrap;
		align-items: center;
		justify-content: center;
		row-gap: 40px;
	}

	li {
		min-width: 100px;
		display: flex;
		align-items: center;
		justify-content: center;
		padding: 20px;
		opacity: 0;
		transform: translateY(20px);
	}

	li.animate {
		animation: fadeInUp 0.6s ease var(--delay, 0s) forwards;
	}

	@keyframes fadeInUp {
		from {
			opacity: 0;
			transform: translateY(20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	li img {
		width: 70px;
		height: 70px;
		object-fit: contain;
	}

	h4 {
		margin-top: -30px;
		margin-bottom: 30px;
		text-align: center;
		font-weight: 400;
	}

	@media (max-width: 768px) {
		ul {
			gap: 20px;
			row-gap: 20px;
		}

		li {
			min-width: 50px;
			padding: 10px;
		}

		li img {
			width: 50px;
			height: 50px;
		}
	}
</style>

<!-- Script que detecta cuándo cada <li> entra en el viewport y activa la animación -->
<script>
	document.addEventListener('DOMContentLoaded', () => {
		const items = document.querySelectorAll('li')
		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					if (entry.isIntersecting) {
						entry.target.classList.add('animate')
						observer.unobserve(entry.target)
					}
				})
			},
			{ threshold: 0 }
		)

		items.forEach((item) => observer.observe(item))
	})
</script>
